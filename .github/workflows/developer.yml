# every day build once

name: Schedule Developer CI

# Controls when the workflow will run
on:
  
  # 定时执行, 每天国际时间 12 点, 北京时间 20 点
  schedule:
    - cron: '0 7 30 * *'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]   
  #  paths-ignore: ["**/*.txt","**/*.md", "LICENSE", "**/*.xmind", "**/*.doc", "**/*.docx", "**/*.yml", "**/*.ymal"]
  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:

    strategy:
      matrix:
        configuration: [Debug]

    # The type of runner that the job will run on
    runs-on: windows-latest
    # windows-latest 
    
    env:
      Solution_Name: Action-wpf
      InstallUrl: http://124.223.33.67:16480/update/Action-wpf/developer/


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
     
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v2
        with:
            dotnet-version: 6.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2 

      - name:  Setup Node
        uses: actions/setup-node@v3
        with:
            node-version: 14
      
      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}
      
      # dev 使用时间戳作为版本号
      - name: Get Version
        id: version
        run: echo "::set-output name=today::$(Get-Date -Format 'Hms')"
      
      - name: Get Display Folder
        id: folder
        run: echo "::set-output name=name::$(Get-Date -Format 'yyyyMMddHHmmss')"

      - name: Save Solution Name
        id: solution
        run: echo "::set-output name=name::${{env.Solution_Name}}"
        
      # 指定版本号，输出目录，更新地址
      - name: public ClickOnce
        run: msbuild $env:Solution_Name /t:publish /p:PublishProfile=Properties/PublishProfiles/ClickOnceProfile.pubxml /p:PublishDir="../pub/" /p:ApplicationRevision=${{steps.version.outputs.today}} /p:InstallUrl=$env:InstallUrl /p:Configuration=Debug 
      
      - uses: actions/upload-artifact@v3
        with:
            name: package
            path: pub/

      - name: deploy file to server version
        uses:  SamKirkland/FTP-Deploy-Action@4.3.0
        with:            
          server: ${{ secrets.FILE_SERVER_IP }}
          port: ${{ secrets.FILE_SERVER_PORT }}
          protocol: ftps
          username: ${{ secrets.FILE_SERVER_USER_NAME }}  
          password: ${{ secrets.FILE_SERVER_USER_PWD }} 
          local-dir: './pub/'
          # 发布到版本管理地址
          server-dir: './version/${{steps.solution.outputs.name}}/developer/${{steps.folder.outputs.name}}/'          
      
      - name: deploy file to server update
        uses:  SamKirkland/FTP-Deploy-Action@4.3.0
        with:            
          server: ${{ secrets.FILE_SERVER_IP }}
          port: ${{ secrets.FILE_SERVER_PORT }}
          protocol: ftps
          username: ${{ secrets.FILE_SERVER_USER_NAME }}  
          password: ${{ secrets.FILE_SERVER_USER_PWD }} 
          local-dir: './pub/'
          # 发布到 更新地址
          server-dir: './update/${{steps.solution.outputs.name}}/developer/'          
      
      # build
      - name: build 
        run: msbuild  $env:Solution_Name

      - name: notify build failure
        uses: tokorom/action-slack-incoming-webhook@main
        env:
             INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
             text: "build failte, check actions log"
             attachments: |
                [
                    {
                        "color": "good",
                        "author_name": "${{ github.actor }}",
                        "author_icon": "${{ github.event.sender.avatar_url }}",                 
                        "fields": [
                                        {
                                            "title": "Commit User",
                                            "value": "${{ github.event.commits[0].committer.name}}"
                                        },
                                        {
                                            "title": "Commit Message",
                                            "value": "${{ github.event.commits[0].message }}"
                                        },
                                        {
                                            "title": "GitHub Actions URL",
                                            "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                                        }
                                ]
                    }
                ]
        if: failure()

      
      - name: notify build success
        uses: tokorom/action-slack-incoming-webhook@main
        env:
             INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
             text: "build success"
             attachments: |
                [
                    {
                        "color": "good",
                        "author_name": "${{ github.actor }}",
                        "author_icon": "${{ github.event.sender.avatar_url }}",                 
                        "fields": [
                                        {
                                            "title": "Commit User",
                                            "value": "${{ github.event.commits[0].committer.name}}"
                                        },
                                        {
                                            "title": "Commit Message",
                                            "value": "${{ github.event.commits[0].message }}"
                                        },
                                        {
                                            "title": "GitHub Actions URL",
                                            "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                                        },
                                        {
                                            "title": "downaload url"
                                        }
                                ]
                    }
                ]

        if: success()
          
     