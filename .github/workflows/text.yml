# 每次 github 提交都会执行

name: Push Text Developer CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]       
  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  # This workflow contains a single job called "build"
  build:

    strategy:
      matrix:
        configuration: [Debug]

    # The type of runner that the job will run on
    runs-on: windows-latest    
    
    env:
      SolutionName: Action-wpf      
      DefaultVersion: 1.0.0,0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:  
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
            
        - name: Dump GitHub context
          id: github_context_step
          run: echo '${{ toJSON(github) }}'
        - name: Dump job context
          run: echo '${{ toJSON(job) }}'
        - name: Dump steps context
          run: echo '${{ toJSON(steps) }}'
        - name: Dump runner context
          run: echo '${{ toJSON(runner) }}'
        - name: Dump strategy context
          run: echo '${{ toJSON(strategy) }}'
        - name: Dump matrix context
          run: echo '${{ toJSON(matrix) }}'
        

        - name: Extract branch name
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: extract_branch



          # ("AAABDDDD") -Replace 'B', 'PowerShell'
        - name: formate message
          id: FormatMsg  
          run: echo "::set-output content=msg::$([String]::Format("{0}", '$(("AABBCC") -Replace "BB", " PowerShell ")'))"
       
        - name: echo msg
          run: echo "${{steps.FormatMsg.outputs.content}}"
        #- name: Read File
        #  id: RemoteVersionFile
        #  run: echo "::set-output name=content::$(Get-Content ./1.txt)"   

        #- name: notify build failure
        #  uses: tokorom/action-slack-incoming-webhook@main
        #  env:
        #      INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        #  with:
        #     text: 'AAAA\n BBBB\n'
             
        #     # ${{steps.RemoteVersionFile.outputs.content}}

        

        ## 获取远程版本文件
        #- name: Get Remote Version File
        #  run: Invoke-WebRequest -Uri ${{secrets.VERSION_FILE_URL}} -OutFile ./version.txt
          
        #- name: Read Remote Version File
        #  id: RemoteVersionFile
        #  run: echo "::set-output name=content::$(Get-Content ./version.txt)"          

        ## 将正式的版本号写到新的文件中，然后再读取
        #- name: Wrire File
        #  run: $env:DefaultVersion >> PrevVersion.txt

        #- name: Wirte Remote Version
        #  if: ${{steps.RemoteVersionFile.outputs.content != null}}                  
        #  run: rm -r PrevVersion.txt;$(Get-Content ./version.txt) >> PrevVersion.txt

        #- name: Read Version File
        #  id: PrevVersionFile
        #  run: echo "::set-output name=content::$(Get-Content ./PrevVersion.txt)"
        
        #- name: Get Prev Version
        #  id: PrevVersion                         
        #  run: echo "::set-output name=main::$(({${{steps.PrevVersionFile.outputs.content}}} -split ',')[0])" 
        #       echo "::set-output name=revision::$(({${{steps.PrevVersionFile.outputs.content}}} -split ',')[1])"

        #- name: Get Current Version
        #  id: CurrentVersion 
        #  run: echo "::set-output name=main::${{steps.PrevVersion.outputs.main}}" 
        #       echo "::set-output name=revision::$(${{steps.PrevVersion.outputs.revision}} + 1)" 
          
        #- name: Get Version String
        #  id: VersionStr
        #  run: echo "::set-output name=version::$([String]::Format("{0}.{1}", '${{steps.CurrentVersion.outputs.main}}', '${{steps.CurrentVersion.outputs.revision}}'))"

        #- name: echo version
        #  run: echo "main=${{steps.CurrentVersion.outputs.main}}, revision = ${{steps.CurrentVersion.outputs.revision}}, verion=${{steps.VersionStr.outputs.version}}"

        ## 更新地址
        #- name: Save Update Url
        #  id: InstallUrl
        #  run: echo "::set-output name=url::$([String]::Format("${{secrets.APP_UPDATE_URL_ROOT}}/update/{0}/developer/", '${{env.SolutionName}}'))"

        #- name: echo install url
        #  run: echo "install url=${{steps.InstallUrl.outputs.url}}"
        ##- name: Check
        ##  uses: garygrossgarten/github-action-ssh@release
        ##  with:
        ##    command: powershell cd /;cd py;python ./check.py c:/pub/version/Action-wpf/developer 7
        ##    host: ${{secrets.SSH_HOST}}
        ##    port: ${{secrets.SSH_PORT}}
        ##    username: ${{secrets.SSH_USER_NAME}}
        ##    password : ${{secrets.SSH_USER_PWD}}
            
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      
      
     